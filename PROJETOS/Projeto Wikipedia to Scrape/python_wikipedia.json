[
    {
        "title": "Python",
        "summary": "<p><i><b>Python</b></i>  é uma <a href=\"/wiki/Linguagem_de_programa%C3%A7%C3%A3o_de_alto_n%C3%ADvel\" class=\"mw-redirect\" title=\"Linguagem de programação de alto nível\">linguagem de programação de alto nível</a>,<sup id=\"cite_ref-entrevista-venners-pt-1_5-0\" class=\"reference\"><a href=\"#cite_note-entrevista-venners-pt-1-5\"><span>[</span>5<span>]</span></a></sup> <a href=\"/wiki/Linguagem_interpretada\" title=\"Linguagem interpretada\">interpretada</a> de <a href=\"/wiki/Linguagem_de_script\" title=\"Linguagem de script\">script</a>, <a href=\"/wiki/Programa%C3%A7%C3%A3o_imperativa\" title=\"Programação imperativa\">imperativa</a>, <a href=\"/wiki/Orienta%C3%A7%C3%A3o_a_objetos\" title=\"Orientação a objetos\">orientada a objetos</a>, <a href=\"/wiki/Programa%C3%A7%C3%A3o_funcional\" title=\"Programação funcional\">funcional</a>, de <a href=\"/wiki/Tipo_de_dado\" title=\"Tipo de dado\">tipagem</a> dinâmica e forte. Foi lançada por <a href=\"/wiki/Guido_van_Rossum\" title=\"Guido van Rossum\">Guido van Rossum</a> em <a href=\"/wiki/1991\" title=\"1991\">1991</a>.<sup id=\"cite_ref-svn-história_1-2\" class=\"reference\"><a href=\"#cite_note-svn-hist%C3%B3ria-1\"><span>[</span>1<span>]</span></a></sup> Atualmente, possui um modelo de desenvolvimento comunitário, aberto e gerenciado pela <a href=\"/wiki/Organiza%C3%A7%C3%A3o_sem_fins_lucrativos\" title=\"Organização sem fins lucrativos\">organização sem fins lucrativos</a> <a href=\"/wiki/Python_Software_Foundation\" title=\"Python Software Foundation\">Python Software Foundation</a>. Apesar de várias partes da linguagem possuírem padrões e especificações formais, a linguagem, como um todo, não é formalmente especificada. O padrão na pratica é a implementação <a href=\"/wiki/CPython\" title=\"CPython\">CPython</a>.\n</p> <p>A linguagem foi projetada com a filosofia de enfatizar a importância do esforço do programador sobre o esforço computacional. Prioriza a legibilidade do código sobre a velocidade ou expressividade. Combina uma <a href=\"/wiki/Sintaxe\" title=\"Sintaxe\">sintaxe</a> concisa e clara com os recursos poderosos de sua <a href=\"/wiki/Biblioteca_de_rotinas\" class=\"mw-redirect\" title=\"Biblioteca de rotinas\">biblioteca</a> padrão e por <a href=\"/wiki/M%C3%B3dulo_de_um_programa\" title=\"Módulo de um programa\">módulos</a> e <i><a href=\"/wiki/Framework\" title=\"Framework\">frameworks</a></i> desenvolvidos por terceiros.\n</p> <p>Python é uma linguagem de propósito geral de <a href=\"/wiki/Linguagem_de_programa%C3%A7%C3%A3o_de_alto_n%C3%ADvel\" class=\"mw-redirect\" title=\"Linguagem de programação de alto nível\">alto nível</a>, <a href=\"/wiki/Linguagem_de_programa%C3%A7%C3%A3o_multiparadigma\" title=\"Linguagem de programação multiparadigma\">multiparadigma</a>, suporta o paradigma orientado a objetos, imperativo, funcional e procedural. Possui tipagem dinâmica e uma de suas principais características é permitir a fácil leitura do código e exigir poucas linhas de código se comparado ao mesmo programa em outras linguagens. Devido às suas características, ela é utilizada, principalmente, para processamento de textos, dados científicos e criação de <a href=\"/wiki/CGI\" class=\"mw-disambig\" title=\"CGI\">CGIs</a> para páginas dinâmicas para a web. Foi considerada pelo público a 3ª linguagem \"mais amada\", de acordo com uma pesquisa conduzida pelo <i>site</i> <a href=\"/wiki/Stack_Overflow\" title=\"Stack Overflow\">Stack Overflow</a> em 2018<sup id=\"cite_ref-6\" class=\"reference\"><a href=\"#cite_note-6\"><span>[</span>6<span>]</span></a></sup> e está entre as 5 linguagens mais populares, de acordo com uma pesquisa conduzida pela <a href=\"/wiki/RedMonk\" title=\"RedMonk\">RedMonk</a>.<sup id=\"cite_ref-7\" class=\"reference\"><a href=\"#cite_note-7\"><span>[</span>7<span>]</span></a></sup>\n</p> <p>O nome <i><b>Python</b></i> teve a sua origem no grupo humorístico <a href=\"/wiki/Reino_Unido\" title=\"Reino Unido\">britânico</a> <a href=\"/wiki/Monty_Python\" title=\"Monty Python\">Monty Python</a>,<sup id=\"cite_ref-Computerworld_8-0\" class=\"reference\"><a href=\"#cite_note-Computerworld-8\"><span>[</span>8<span>]</span></a></sup> criador do programa <i><a href=\"/wiki/Monty_Python\" title=\"Monty Python\">Monty Python's Flying Circus</a></i>, embora muitas pessoas façam associação com o <a href=\"/wiki/R%C3%A9ptil\" class=\"mw-redirect\" title=\"Réptil\">réptil</a> do mesmo nome (em <a href=\"/wiki/L%C3%ADngua_portuguesa\" title=\"Língua portuguesa\">português</a>, <i><a href=\"/wiki/P%C3%ADton\" class=\"mw-redirect\" title=\"Píton\">píton</a></i> ou <i>pitão</i>).\n</p> <p>O Python foi concebido no final de 1989<sup id=\"cite_ref-entrevista-venners-pt-1_5-1\" class=\"reference\"><a href=\"#cite_note-entrevista-venners-pt-1-5\"><span>[</span>5<span>]</span></a></sup><sup id=\"cite_ref-Computerworld_8-1\" class=\"reference\"><a href=\"#cite_note-Computerworld-8\"><span>[</span>8<span>]</span></a></sup> por <a href=\"/wiki/Guido_van_Rossum\" title=\"Guido van Rossum\">Guido van Rossum</a> no <a href=\"https://en.wikipedia.org/wiki/Centrum_Wiskunde_%26_Informatica\" class=\"extiw\" title=\"en:Centrum Wiskunde &amp; Informatica\">Instituto de Pesquisa Nacional para Matemática e Ciência da Computação</a> (CWI), nos <a href=\"/wiki/Pa%C3%ADses_Baixos\" title=\"Países Baixos\">Países Baixos</a>, como um sucessor da <a href=\"/wiki/ABC_(linguagem_de_programa%C3%A7%C3%A3o)\" title=\"ABC (linguagem de programação)\">ABC</a> capaz de <a href=\"/wiki/Tratamento_de_exce%C3%A7%C3%B5es\" class=\"mw-redirect\" title=\"Tratamento de exceções\">tratar exceções</a> e prover interface com o <a href=\"/wiki/Sistema_operacional\" class=\"mw-redirect\" title=\"Sistema operacional\">sistema operacional</a> <a href=\"/wiki/Amoeba_(sistema_operacional)\" title=\"Amoeba (sistema operacional)\">Amoeba</a><sup id=\"cite_ref-faq-criado_9-0\" class=\"reference\"><a href=\"#cite_note-faq-criado-9\"><span>[</span>9<span>]</span></a></sup> através de <a href=\"/wiki/Linguagem_de_script\" title=\"Linguagem de script\">scripts</a>. Também da CWI, a linguagem ABC era mais produtiva que <a href=\"/wiki/C_(linguagem_de_programa%C3%A7%C3%A3o)\" title=\"C (linguagem de programação)\">C</a>, ainda que com o custo do desempenho em <a href=\"/wiki/Tempo_de_execu%C3%A7%C3%A3o\" title=\"Tempo de execução\">tempo de execução</a>. Mas ela não possuía funcionalidades importantes para a interação com o sistema operacional, uma necessidade do grupo. Um dos focos primordiais de Python era aumentar a produtividade do programador.<sup id=\"cite_ref-Computerworld_8-2\" class=\"reference\"><a href=\"#cite_note-Computerworld-8\"><span>[</span>8<span>]</span></a></sup>\n</p> <p>Python foi feita com base na linguagem ABC, possui parte da sintaxe derivada do C, compreensão de listas, funções anonimas e função map de Haskell. Os iteradores são baseados na Icon, tratamentos de exceção e módulos da Modula-3, expressões regulares de Perl.\n</p> <p>Em 1991, Guido publicou o código (nomeado versão 0.9.0) no grupo de discussão <code>alt.sources</code>.<sup id=\"cite_ref-svn-história_1-3\" class=\"reference\"><a href=\"#cite_note-svn-hist%C3%B3ria-1\"><span>[</span>1<span>]</span></a></sup> Nessa versão já estavam presentes <a href=\"/wiki/Classe_(programa%C3%A7%C3%A3o)\" title=\"Classe (programação)\">classes</a> com <a href=\"/wiki/Heran%C3%A7a_(programa%C3%A7%C3%A3o)\" class=\"mw-redirect\" title=\"Herança (programação)\">herança</a>, tratamento de exceções, <a href=\"/wiki/Sub-rotina\" class=\"mw-redirect\" title=\"Sub-rotina\">funções</a> e os <a href=\"/wiki/Tipo_de_dado\" title=\"Tipo de dado\">tipos de dado</a> nativos <code><a href=\"/wiki/Lista\" title=\"Lista\">list</a></code>, <code><a href=\"/wiki/Dicion%C3%A1rio\" title=\"Dicionário\">dict</a></code>, <code><a href=\"/wiki/Cadeia_de_caracteres\" title=\"Cadeia de caracteres\">str</a></code>, e assim por diante. Também estava presente nessa versão um sistema de módulos emprestado do <a href=\"/wiki/Modula-3\" title=\"Modula-3\">Modula-3</a>. O modelo de exceções também lembrava muito o do Modula-3, com a adição da opção <code>else</code> clause.<sup id=\"cite_ref-faq-criado_9-1\" class=\"reference\"><a href=\"#cite_note-faq-criado-9\"><span>[</span>9<span>]</span></a></sup> Em 1994 foi formado o principal fórum de discussão do Python, comp.lang.python, um marco para o crescimento da base de usuários da linguagem.\n</p> <p>A versão 1.0 foi lançada em janeiro de 1994. Novas funcionalidades incluíam ferramentas para <a href=\"/wiki/Programa%C3%A7%C3%A3o_funcional\" title=\"Programação funcional\">programação funcional</a> como <code><a href=\"/wiki/C%C3%A1lculo_lambda\" title=\"Cálculo lambda\">lambda</a></code>, <code>map</code>, <code>filter</code> e <code>reduce</code>. A última versão enquanto Guido estava na CWI foi o Python 1.2. Em 1995, ele continuou o trabalho no CNRI em <a href=\"/wiki/Reston\" title=\"Reston\">Reston</a>, <a href=\"/wiki/Estados_Unidos\" title=\"Estados Unidos\">Estados Unidos</a>, de onde lançou diversas versões. Na versão 1.4 a linguagem ganhou parâmetros nomeados (a capacidade de passar parâmetro pelo nome e não pela posição na lista de parâmetros) e suporte nativo a <a href=\"/wiki/N%C3%BAmero_complexo\" title=\"Número complexo\">números complexos</a>, assim como uma forma de <a href=\"/wiki/Encapsulamento\" class=\"mw-redirect\" title=\"Encapsulamento\">encapsulamento</a>.<sup id=\"cite_ref-10\" class=\"reference\"><a href=\"#cite_note-10\"><span>[</span>10<span>]</span></a></sup>\n</p> <p>Ainda na CNRI, Guido lançou a iniciativa <i>Computer Programming for Everybody</i> (CP4E; literalmente, \"Programação de Computadores para Todos\"), que visava tornar a <a href=\"/wiki/Programa%C3%A7%C3%A3o_de_computadores\" title=\"Programação de computadores\">programação</a> mais acessível, um projeto financiado pela <a href=\"/wiki/DARPA\" class=\"mw-redirect\" title=\"DARPA\">DARPA</a>.<sup id=\"cite_ref-11\" class=\"reference\"><a href=\"#cite_note-11\"><span>[</span>11<span>]</span></a></sup> Atualmente o CP4E encontra-se inativo.\n</p> <p>Em 2000, o time de desenvolvimento da linguagem se mudou para a BeOpen a fim de formar o time <a href=\"/w/index.php?title=PythonLabs&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"PythonLabs (página não existe)\">PythonLabs</a>. A CNRI pediu que a versão 1.6 fosse lançada para marcar o fim de desenvolvimento da linguagem naquele local. O único lançamento na BeOpen foi o Python 2.0, e após o lançamento o grupo de desenvolvedores da PythonLabs agrupou-se na <a href=\"/w/index.php?title=Digital_Creations&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Digital Creations (página não existe)\">Digital Creations</a>.\n</p> <p>Python 2.0 implementou <a href=\"/wiki/List_comprehension\" class=\"mw-redirect\" title=\"List comprehension\">list comprehension</a>, uma relevante funcionalidade de linguagens funcionais como <a href=\"/wiki/SETL\" title=\"SETL\">SETL</a> e <a href=\"/wiki/Haskell_(linguagem_de_programa%C3%A7%C3%A3o)\" title=\"Haskell (linguagem de programação)\">Haskell</a>. A sintaxe da linguagem para essa construção é bastante similar a de Haskell, exceto pela preferência do Haskell por caracteres de pontuação e da preferência do python por <a href=\"/wiki/Palavra_reservada\" title=\"Palavra reservada\">palavras reservadas</a> alfabéticas. Essa versão 2.0 também introduziu um sistema <a href=\"/wiki/Coletor_de_lixo_(inform%C3%A1tica)\" title=\"Coletor de lixo (informática)\">coletor de lixo</a> capaz de identificar e tratar ciclos de referências.<sup id=\"cite_ref-newin-2.0_12-0\" class=\"reference\"><a href=\"#cite_note-newin-2.0-12\"><span>[</span>12<span>]</span></a></sup>\n</p> <p>Já o 1.6 incluiu uma licença CNRI substancialmente mais longa que a licença CWI que estavam usando nas versões anteriores. Entre outras mudanças, essa licença incluía uma cláusula atestando que a licença era governada pelas leis da <a href=\"/wiki/Virg%C3%ADnia\" title=\"Virgínia\">Virgínia</a>. A <a href=\"/wiki/Free_Software_Foundation\" title=\"Free Software Foundation\">Free Software Foundation</a> alegou que isso era incompatível com a <a href=\"/wiki/GNU_GPL\" class=\"mw-redirect\" title=\"GNU GPL\">GNU GPL</a>. Tanto BeOpen quanto CNRI e FSF negociaram uma mudança na licença livre do Python que o tornaria compatível com a GPL. Python 1.6.1 é idêntico ao 1.6.0, exceto por pequenas correções de falhas e uma licença nova, compatível com a GPL.<sup id=\"cite_ref-história-lib_13-0\" class=\"reference\"><a href=\"#cite_note-hist%C3%B3ria-lib-13\"><span>[</span>13<span>]</span></a></sup>\n</p> <p>Python 2.1 era parecido com as versões 1.6.1 e 2.0. Sua licença foi renomeada para Python Software Foundation License.<sup id=\"cite_ref-license_4-1\" class=\"reference\"><a href=\"#cite_note-license-4\"><span>[</span>4<span>]</span></a></sup> Todo código, documentação e especificação desde o lançamento da <a href=\"/wiki/Vers%C3%A3o_alfa\" title=\"Versão alfa\">versão alfa</a> da 2.1 é propriedade da <a href=\"/wiki/Python_Software_Foundation\" title=\"Python Software Foundation\">Python Software Foundation</a> (PSF), uma <a href=\"/wiki/Organiza%C3%A7%C3%A3o_sem_fins_lucrativos\" title=\"Organização sem fins lucrativos\">organização sem fins lucrativos</a> fundada em 2001, um modelo tal qual da <a href=\"/wiki/Apache_Software_Foundation\" title=\"Apache Software Foundation\">Apache Software Foundation</a>.<sup id=\"cite_ref-história-lib_13-1\" class=\"reference\"><a href=\"#cite_note-hist%C3%B3ria-lib-13\"><span>[</span>13<span>]</span></a></sup> O lançamento incluiu a mudança na especificação para suportar escopo aninhado, assim como outras linguagens com escopo estático.<sup id=\"cite_ref-14\" class=\"reference\"><a href=\"#cite_note-14\"><span>[</span>14<span>]</span></a></sup> Esta funcionalidade estava desativada por padrão, e somente foi requerida na versão 2.2.\n</p> <p>Uma grande inovação da versão 2.2 foi a unificação dos tipos Python (escritos em <a href=\"/wiki/C_(linguagem_de_programa%C3%A7%C3%A3o)\" title=\"C (linguagem de programação)\">C</a>) e classes (escritas em Python) em somente uma hierarquia. Isto tornou o modelo de objetos do Python consistentemente orientado a objeto.<sup id=\"cite_ref-15\" class=\"reference\"><a href=\"#cite_note-15\"><span>[</span>15<span>]</span></a></sup> Também foi adicionado <a href=\"/wiki/Generator_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)\" class=\"mw-redirect\" title=\"Generator (ciência da computação)\">generator</a>, inspirado em <a href=\"/wiki/Icon_(linguagem_de_programa%C3%A7%C3%A3o)\" title=\"Icon (linguagem de programação)\">Icon</a>.<sup id=\"cite_ref-16\" class=\"reference\"><a href=\"#cite_note-16\"><span>[</span>16<span>]</span></a></sup>\n</p> <p>O incremento da biblioteca padrão e as escolhas sintáticas foram fortemente influenciadas por <a href=\"/wiki/Java_(linguagem_de_programa%C3%A7%C3%A3o)\" title=\"Java (linguagem de programação)\">Java</a> em alguns casos: o pacote <code>logging</code><sup id=\"cite_ref-17\" class=\"reference\"><a href=\"#cite_note-17\"><span>[</span>17<span>]</span></a></sup> introduzido na versão 2.3,<sup id=\"cite_ref-18\" class=\"reference\"><a href=\"#cite_note-18\"><span>[</span>18<span>]</span></a></sup> o <a href=\"/wiki/Analisador_sint%C3%A1tico\" class=\"mw-redirect\" title=\"Analisador sintático\">analisador sintático</a> <a href=\"/wiki/SAX\" class=\"mw-redirect\" title=\"SAX\">SAX</a>, introduzido na versão 2.0 e a sintaxe de decoradores que usa <code>@</code>,<sup id=\"cite_ref-19\" class=\"reference\"><a href=\"#cite_note-19\"><span>[</span>19<span>]</span></a></sup> adicionadas na versão 2.4.<sup id=\"cite_ref-20\" class=\"reference\"><a href=\"#cite_note-20\"><span>[</span>20<span>]</span></a></sup>\n</p> <p>Em 1 de outubro de 2008 foi lançada a versão 2.6, já visando a transição para a versão 3.0 da linguagem. Entre outras modificações, foram incluídas <a href=\"/wiki/Biblioteca_(computa%C3%A7%C3%A3o)\" title=\"Biblioteca (computação)\">bibliotecas</a> para <a href=\"/wiki/Multiprocessamento\" title=\"Multiprocessamento\">multiprocessamento</a>, <a href=\"/wiki/JSON\" title=\"JSON\">JSON</a> e <a href=\"/wiki/E/S\" class=\"mw-redirect\" title=\"E/S\">E/S</a>, além de uma nova forma de formatação de <a href=\"/wiki/Cadeia_de_caracteres\" title=\"Cadeia de caracteres\">cadeias de caracteres</a>.<sup id=\"cite_ref-21\" class=\"reference\"><a href=\"#cite_note-21\"><span>[</span>21<span>]</span></a></sup>\n</p> <p>Atualmente a linguagem é usada em diversas áreas, como <a href=\"/wiki/Servidor_de_aplica%C3%A7%C3%A3o\" title=\"Servidor de aplicação\">servidores de aplicação</a> e <a href=\"/wiki/Computa%C3%A7%C3%A3o_gr%C3%A1fica\" title=\"Computação gráfica\">computação gráfica</a>. Está disponível como <a href=\"/wiki/Linguagem_de_script\" title=\"Linguagem de script\">linguagem de script</a> em aplicações como <a href=\"/wiki/OpenOffice\" class=\"mw-redirect\" title=\"OpenOffice\">OpenOffice</a> (Python UNO Bridge), <a href=\"/wiki/Blender\" title=\"Blender\">Blender</a> e pode ser utilizada em <a href=\"/wiki/Procedimento_armazenado\" title=\"Procedimento armazenado\">procedimentos armazenados</a> no <a href=\"/wiki/Sistema_de_gerenciamento_de_banco_de_dados\" title=\"Sistema de gerenciamento de banco de dados\">sistema gerenciador de banco de dados</a> <a href=\"/wiki/PostgreSQL\" title=\"PostgreSQL\">PostgreSQL</a> (PL/Python).\n</p> <p>A terceira versão da linguagem foi lançada em dezembro de 2008,<sup id=\"cite_ref-22\" class=\"reference\"><a href=\"#cite_note-22\"><span>[</span>22<span>]</span></a></sup> chamada Python 3.0 ou Python 3000. Com noticiado desde antes de seu lançamento,<sup id=\"cite_ref-23\" class=\"reference\"><a href=\"#cite_note-23\"><span>[</span>23<span>]</span></a></sup> houve quebra de compatibilidade com a família 2.x para corrigir falhas que foram descobertas neste padrão, e para limpar os excessos das versões anteriores.<sup id=\"cite_ref-Computerworld_8-3\" class=\"reference\"><a href=\"#cite_note-Computerworld-8\"><span>[</span>8<span>]</span></a></sup> A primeira <a href=\"/wiki/Vers%C3%A3o_alfa\" title=\"Versão alfa\">versão alfa</a> foi lançada em 31 de agosto de 2007, a segunda em 7 de dezembro do mesmo ano.\n</p> <p>Mudanças da versão incluem a alteração da <a href=\"/wiki/Palavra_reservada\" title=\"Palavra reservada\">palavra reservada</a> <code>print</code>, que passa a ser uma função, tornando mais fácil a utilização de uma versão alternativa da rotina. Em Python 2.6, isso já está disponível ao adicionar o código <code>from __future__ import print_function</code>.<sup id=\"cite_ref-24\" class=\"reference\"><a href=\"#cite_note-24\"><span>[</span>24<span>]</span></a></sup> Também, a mudança para <a href=\"/wiki/Unicode\" title=\"Unicode\">Unicode</a> de todas as <a href=\"/wiki/Cadeia_de_caracteres\" title=\"Cadeia de caracteres\">cadeias de caracteres</a>.<sup id=\"cite_ref-25\" class=\"reference\"><a href=\"#cite_note-25\"><span>[</span>25<span>]</span></a></sup>\n</p> <p>Em 2012, foi criado o Raspberry Pi, cujo nome foi baseado na linguagem Python. Uma das principais linguagens escolhidas é Python. Python influenciou várias linguagens, algumas delas foram Boo e Cobra, que usa a indentação como definição de bloco e Go, que se baseia nos princípios de desenvolvimento rápido de Python.\n</p> <p>Atualmente, Python é um dos componentes padrão de vários sistemas operacionais, entre eles estão a maioria das distribuições do Linux, AmigaOS 4, FreeBSD, <a href=\"/wiki/NetBSD\" title=\"NetBSD\">NetBSD</a>, <a href=\"/wiki/OpenBSD\" title=\"OpenBSD\">OpenBSD</a> e OS X. A linguagem se tornou a padrão no curso de ciências da computação do MIT em 2009\n</p> <p>Parte da cultura da linguagem gira ao redor de <i><a href=\"/wiki/Zen_of_Python\" class=\"mw-redirect\" title=\"Zen of Python\">The Zen of Python</a></i>, um poema que faz parte do documento \"PEP 20 (The Zen of Python)\",<sup id=\"cite_ref-Zen_26-0\" class=\"reference\"><a href=\"#cite_note-Zen-26\"><span>[</span>26<span>]</span></a></sup> escrito pelo <a href=\"/wiki/Programador\" title=\"Programador\">programador</a> em Python de longa data Tim Peters, descrevendo sumariamente a filosofia do Python. Entre os vinte princípios do poema, estão presentes:\n</p> <p>Pode-se vê-lo através de um <i><a href=\"/wiki/Easter_egg\" title=\"Easter egg\">easter egg</a></i> do Python pelo comando:\n</p> <p>O desenvolvimento de Python é conduzido amplamente através do processo Python Enhancement Proposal (\"PEP\"), em português Proposta de Melhoria do Python. Os PEPs são documentos de projeto padronizados que fornecem informações gerais relacionadas ao Python, incluindo propostas, descrições, <a href=\"/w/index.php?title=Justificativas_de_projeto&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Justificativas de projeto (página não existe)\">justificativas de projeto</a> (design rationales) e explicações para características da linguagem. PEPs pendentes são revisados e comentados por Van Rossum, o <a href=\"/wiki/Benevolent_Dictator_for_Life\" title=\"Benevolent Dictator for Life\">Benevolent Dictator for Life</a> (líder arquiteto da linguagem) do projeto Python. Desenvolvedores do CPython também se comunicam através de uma lista de discussão, python-dev, que é o fórum principal para discussão sobre o desenvolvimento da linguagem. Questões específicas são discutidas no <a href=\"/w/index.php?title=Sistema_de_gerenciamento_de_erros&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Sistema de gerenciamento de erros (página não existe)\">gerenciador de erros</a> <a href=\"/w/index.php?title=Roundup_(gerenciador_de_erros)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Roundup (gerenciador de erros) (página não existe)\">Roundup</a> mantido em python.org. O desenvolvimento acontece no auto-hospedado <a rel=\"nofollow\" class=\"external free\" href=\"https://svn.python.org/\">https://svn.python.org/</a>\n</p> <p>Python possui uma licença <a href=\"/wiki/C%C3%B3digo_livre\" class=\"mw-redirect\" title=\"Código livre\">livre</a> aprovada pela <a href=\"/wiki/Open_Source_Initiative\" title=\"Open Source Initiative\">OSI</a> e compatível com a <a href=\"/wiki/GNU_General_Public_License\" title=\"GNU General Public License\">GPL</a>, porém menos restritiva. Ela prevê (entre outras coisas) que binários da linguagem sejam distribuídos sem a necessidade de fornecer o <a href=\"/wiki/C%C3%B3digo_fonte\" class=\"mw-redirect\" title=\"Código fonte\">código fonte</a> junto.<sup id=\"cite_ref-license_4-2\" class=\"reference\"><a href=\"#cite_note-license-4\"><span>[</span>4<span>]</span></a></sup>\n</p> <p>Ao longo do tempo têm sido desenvolvidos pela comunidade de programadores muitas <a href=\"/wiki/Biblioteca_de_rotinas\" class=\"mw-redirect\" title=\"Biblioteca de rotinas\">bibliotecas de funções especializadas</a> (módulos) que permitem expandir as capacidades base da linguagem. Entre estes módulos especializados destacam-se:\n</p> <p>Existem vários <a href=\"/wiki/Ambiente_de_desenvolvimento_integrado\" title=\"Ambiente de desenvolvimento integrado\">ambientes de desenvolvimento integrado</a> (IDE) disponíveis para Python:\n</p> <p>Construções de Python incluem: <a href=\"/wiki/Estrutura_de_sele%C3%A7%C3%A3o\" title=\"Estrutura de seleção\">estrutura de seleção</a> (<code>if</code>, <code>else</code>, <code>elif</code>); <a href=\"/wiki/Estrutura_de_repeti%C3%A7%C3%A3o\" title=\"Estrutura de repetição\">estrutura de repetição</a> (<code>for, while</code>), que itera por um container, capturando cada elemento em uma variável local dada; construção de <a href=\"/wiki/Classe_(programa%C3%A7%C3%A3o)\" title=\"Classe (programação)\">classes</a> (<code>class</code>); construção de <a href=\"/wiki/Sub-rotina\" class=\"mw-redirect\" title=\"Sub-rotina\">sub-rotinas</a> (<code>def</code>); construção de escopo (<code>with</code>), como por exemplo para <a href=\"/wiki/Exclus%C3%A3o_m%C3%BAtua\" title=\"Exclusão mútua\">adquirir um recurso</a>.\n</p> <p>A tipagem de Python é forte, pois os valores e objetos têm tipos bem definidos e não sofrem coerções como em <a href=\"/wiki/C_(linguagem_de_programa%C3%A7%C3%A3o)\" title=\"C (linguagem de programação)\">C</a> ou <a href=\"/wiki/Perl\" title=\"Perl\">Perl</a>. São disponibilizados diversos <a href=\"/wiki/Tipo_de_dado\" title=\"Tipo de dado\">tipos de dados</a> nativos:\n</p> <p>Python também permite a definição dos tipos de dados próprios, através de <a href=\"/wiki/Classe_(programa%C3%A7%C3%A3o)\" title=\"Classe (programação)\">classes</a>. Instâncias são construídas invocando a classe (<code>FooClass()</code>), e as classes são instância da classe <code>type</code>, o que permite <a href=\"/wiki/Metaprograma%C3%A7%C3%A3o\" title=\"Metaprogramação\">metaprogramação</a> e <a href=\"/wiki/Reflex%C3%A3o_(programa%C3%A7%C3%A3o)\" title=\"Reflexão (programação)\">reflexão</a>. <a href=\"/wiki/M%C3%A9todo_(programa%C3%A7%C3%A3o)\" title=\"Método (programação)\">Métodos</a> são definidos como funções anexadas à classe, e a sintaxe <code>instância.método(argumento)</code> é um atalho para <code>Classe.método(instância, argumento)</code>. Os métodos devem referenciar explicitamente a referência para o objeto incluindo o parâmetro <code>self</code> como o primeiro argumento do método.<sup id=\"cite_ref-28\" class=\"reference\"><a href=\"#cite_note-28\"><span>[</span>28<span>]</span></a></sup>\n</p> <p>Antes da versão 3.0, Python possuía dois tipos de classes: \"old-style\" e \"new-style\". Classes old-style foram eliminadas no Python 3.0, e todas são new-style. Em versões entre 2.2 e 3.0, ambos tipos de classes podiam ser usadas. A sintaxe de ambos estilos é a mesma, a diferença acaba sendo de onde objeto da classe é herdado, direta ou indiretamente (todas classes new-style herdam de object e são instancias de type). As classes new-styles nada mais são que tipos definidos pelo usuário.\n</p> <p>\nO Python 3 define as seguintes <a href=\"/wiki/Palavra_reservada\" title=\"Palavra reservada\">palavras reservadas</a>:<sup id=\"cite_ref-29\" class=\"reference\"><a href=\"#cite_note-29\"><span>[</span>29<span>]</span></a></sup></p> <p>A versão 3.10.0 implementou a <i>Structural Pattern Matching</i> (Correspondência de Padrão Estrutural), semelhante ao Switch-Case de outras linguagens, assim como definido na PEP 634<sup id=\"cite_ref-34\" class=\"reference\"><a href=\"#cite_note-34\"><span>[</span>31<span>]</span></a></sup>. Por isso as palavras match e case passarão a ser reservadas.\n</p> <p>Os operadores básicos de comparação como <code>==</code>, <code>&lt;</code>, <code>&gt;=</code>, entre outros são usados em todos os tipos de dados, como números, cadeias de texto, listas e mapeamentos. Comparações em cadeia como <code>a &lt; b &lt; c</code> possuem o mesmo significado básico que na matemática: os termos são comparadas na ordem. É garantido que o processamento da expressão lógica irá terminar tão cedo o veredito seja claro, o princípio da avaliação mínima. Usando a expressão anterior, se <code>a &lt; b</code> é falso, <code>c</code> não é avaliado.\n</p> <p>Quanto aos operadores lógicos, até Python 2.2 não havia o tipo de dado booleano. Em todas as versões da linguagem os operadores lógicos tratam <code>\"\"</code>, <code>0</code>, <code>None</code>, <code>0.0</code>, <code>[]</code> e <code>{}</code> como falso, enquanto o restante é tratado como verdadeiro de modo geral. Na versão 2.2.1 as constantes <code>True</code> e <code>False</code> foram adicionadas (subclasses de 1 e 0 respectivamente). A comparação binária retorna uma das duas constantes acima.\n</p> <p>Os operadores booleanos <code>and</code> e <code>or</code> também seguem a avaliação mínima. Por exemplo, <code>y == 0 or x/y &gt; 100</code> nunca lançará a exceção de divisão por zero.\n</p> <p>O interpretador interativo é uma característica diferencial da linguagem, porque há a possibilidade de testar o código de um programa e receber o resultado em tempo real, antes de iniciar a <a href=\"/wiki/Compilador\" title=\"Compilador\">compilação</a> ou incluí-las nos programas. Por exemplo:\n</p> <p>No segundo capítulo do <i>Manual de Referência da Linguagem Python</i> é citado que a <a href=\"/wiki/An%C3%A1lise_l%C3%A9xica\" title=\"Análise léxica\">análise léxica</a> é uma análise do interpretador em si, os programas são lidos por um <a href=\"/wiki/An%C3%A1lise_sint%C3%A1tica_(computa%C3%A7%C3%A3o)\" title=\"Análise sintática (computação)\">analisador sintático</a> que divide o código em <i><a href=\"/wiki/Token_(an%C3%A1lise_l%C3%A9xica)\" title=\"Token (análise léxica)\">tokens</a></i>.\n</p> <p>Todo programa é dividido em linhas lógicas que são separadas pelo <i>token</i> <i>NEWLINE</i> ou <i>NOVA LINHA</i>, as linhas físicas são trechos de código divididos pelo caractere <i>ENTER</i>. Linhas lógicas não podem ultrapassar linhas físicas com exceção de junção de linhas, por exemplo:\n</p> <p>ou\n</p> <p>Para a delimitação de blocos de códigos, os delimitadores são colocados em uma <a href=\"/wiki/LIFO\" title=\"LIFO\">pilha</a> e diferenciados por sua <a href=\"/wiki/Indenta%C3%A7%C3%A3o\" title=\"Indentação\">indentação</a>, iniciando a pilha com valor 0 (zero) e colocando valores maiores que os anteriores na pilha. Para cada começo de linha, o nível de indentação é comparado com o valor do topo da pilha. Se o número da linha for igual ao topo da pilha, a pilha não é alterada. Se o valor for maior, a pilha recebe o nível de indentação da linha e o nome <i>INDENT</i> (empilhamento). Se o nível de indentação for menor, então é desempilhado até chegar a um nível de indentação recebendo o nome <i>DEDENT</i> (desempilhamento). Se não encontrar nenhum valor, é gerado um erro de indentação.\n</p> <p>Abaixo um exemplo de permutação, retirado do capítulo 2.1 sobre Estrutura de linhas na Análise léxica do Manual de Referência da linguagem (<i>Language Reference Manual</i>):\n</p> <p>Python foi desenvolvido para ser uma linguagem de fácil leitura, com um visual agradável, frequentemente usando palavras e não pontuações como em outras linguagens. Para a separação de blocos de código, a linguagem usa espaços em branco e <a href=\"/wiki/Indenta%C3%A7%C3%A3o\" title=\"Indentação\">indentação</a> ao invés de delimitadores visuais como chaves (C, Java) ou palavras (<a href=\"/wiki/BASIC\" title=\"BASIC\">BASIC</a>, <a href=\"/wiki/Fortran\" title=\"Fortran\">Fortran</a>, <a href=\"/wiki/Pascal_(linguagem_de_programa%C3%A7%C3%A3o)\" title=\"Pascal (linguagem de programação)\">Pascal</a>). Diferente de linguagens com delimitadores visuais de blocos, em Python a indentação é obrigatória. O aumento da indentação indica o início de um novo bloco, que termina da diminuição da indentação.\n</p> <p>Usando um <a href=\"/wiki/Editor_de_texto\" title=\"Editor de texto\">editor de texto</a> comum é muito fácil existir erros de indentação, o recomendado é configurar o editor conforme a <a href=\"/wiki/An%C3%A1lise_l%C3%A9xica\" title=\"Análise léxica\">análise léxica</a> do Python ou utilizar uma <a href=\"/wiki/Ambiente_de_Desenvolvimento_Integrado\" class=\"mw-redirect\" title=\"Ambiente de Desenvolvimento Integrado\">IDE</a>. Todas as IDE que suportam a linguagem fazem indentação automaticamente.\n</p> <p>Exemplo:\n</p> <p>O código está correto para os dois exemplos, mas o analisador léxico verificará se a indentação está coerente. O analisador reconhecerá as <a href=\"/wiki/Palavra_reservada\" title=\"Palavra reservada\">palavras reservadas</a> <code>while</code>, <code>def</code>, <code>try</code>, <code>except</code>, <code>return</code>, <code>print</code> e as <a href=\"/wiki/Cadeia_de_caracteres\" title=\"Cadeia de caracteres\">cadeias de caracteres</a> entre aspas simples e a indentação, e se não houver problemas o programa executará normalmente, senão apresentará a exceção: \"Seu programa está com erro no bloco de indentação\".\n</p> <p>Na internet, há uma comparação de velocidade e de codificação entre as linguagens Python e BASIC, esta última, o dialeto BBC BASIC for Windows.\n</p> <p>A linguagem é de altíssimo nível, como já dito, mas ela também pode <a href=\"/wiki/Compilador\" title=\"Compilador\">compilar</a> seus programas para que a próxima vez que o executar não precise compilar novamente o programa, reduzindo o tempo de carga na execução.\n</p> <p>Utilizando o interpretador interativo não é necessário a criação do arquivo de Python compilado, os comandos são executados interativamente. Porém quando um programa ou um módulo é evocado, o interpretador realiza a análise léxica e sintática, compila o código de alto nível se necessário e o executa na <a href=\"/wiki/M%C3%A1quina_virtual\" title=\"Máquina virtual\">máquina virtual</a> da linguagem.\n</p> <p>O <i><a href=\"/wiki/Bytecode\" title=\"Bytecode\">bytecode</a></i> é armazenado em arquivos com extensão <code>.pyc</code> ou <code>.pyo</code>, este último no caso de <i>bytecode</i> otimizado. Interessante notar que o <i>bytecode</i> da linguagem também é de alto nível, ou seja, é mais legível aos seres humanos que o código de byte do C, por exemplo. Para descompilar um código de byte é utilizado o módulo <code>dis</code> da biblioteca padrão da linguagem e existem módulos de terceiros que tornam o <i>bytecode</i> mais confuso, tornando a descompilação ineficaz.\n</p> <p>Normalmente, o Python trabalha com dois grupos de arquivos:\n</p> <p>Python suporta a maioria das técnicas da <a href=\"/wiki/Programa%C3%A7%C3%A3o_orientada_a_objeto\" class=\"mw-redirect\" title=\"Programação orientada a objeto\">programação orientada a objeto</a>. Qualquer objeto pode ser usado para qualquer tipo, e o código funcionará enquanto haja métodos e atributos adequados. O conceito de objeto na linguagem é bastante abrangente: classes, funções, números e módulos são todos considerados objetos. Também há suporte para <a href=\"/wiki/Metaclasse\" title=\"Metaclasse\">metaclasses</a>, <a href=\"/wiki/Polimorfismo\" class=\"mw-redirect\" title=\"Polimorfismo\">polimorfismo</a>, e <a href=\"/wiki/Heran%C3%A7a_(programa%C3%A7%C3%A3o)\" class=\"mw-redirect\" title=\"Herança (programação)\">herança</a> (inclusive <a href=\"/wiki/Heran%C3%A7a_m%C3%BAltipla\" title=\"Herança múltipla\">herança múltipla</a>). Há um suporte limitado para variáveis privadas.\n</p> <p>Na versão 2.2 de Python foi introduzido um novo estilo de classes em que objetos e tipos foram unificados, permitindo a especialização de tipos. Já a partir da versão 2.3 foi introduzido um novo método de resolução de ambiguidades para heranças múltiplas.<sup id=\"cite_ref-36\" class=\"reference\"><a href=\"#cite_note-36\"><span>[</span>33<span>]</span></a></sup>\n</p> <p>Uma classe é definida com <code>class nome:</code>, e o código seguinte é a composição dos atributos. Todos os métodos da classe recebem uma referência a uma instância da própria classe como seu primeiro argumento, e a convenção é que se chame este argumento <code>self</code>. Assim os métodos são chamados <code>objeto.método(argumento1, argumento2, ...)</code> e são definidos iguais a uma função, como <code>método(self, argumento1, argumento2, ...)</code>. Veja que o parâmetro <code>self</code> conterá uma referência para a instância da classe definida em <code>objeto</code> quando for efetuada esta chamada. Os atributos da classe podem ser acessados em qualquer lugar da classe, e os atributos de instância (ou variável de instância) devem ser declarados dentro dos métodos utilizando a referência à instância atual (<i>self</i>) <i>(ver código contextualizado <a href=\"/w/index.php?title=Lista_de_exemplos_de_c%C3%B3digo_Python&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Lista de exemplos de código Python (página não existe)\">em anexo</a>)</i>.\n</p> <p>Em Python não existe proteção dos membros duma classe ou instância pelo interpretador, o chamado <a href=\"/wiki/Encapsulamento\" class=\"mw-redirect\" title=\"Encapsulamento\">encapsulamento</a>. Convenciona-se que atributos com o nome começando com um _ são de uso privado da classe, mas não há um policiamento do interpretador contra acesso a estes atributos. Uma exceção são nomes começando com <code>__</code>, no caso em que o interpretador modifica o nome do atributo <i>(ver código contextualizado <a href=\"/w/index.php?title=Lista_de_exemplos_de_c%C3%B3digo_Python&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Lista de exemplos de código Python (página não existe)\">em anexo</a>)</i>.\n</p> <p>Python permite polimorfismo, que condiz com a reutilização de código. É fato que funções semelhantes em várias partes do software sejam utilizadas várias vezes, então definimos esta função como uma biblioteca e todas as outras funções que precisarem desta a chamam sem a necessidade de reescrevê-la <i>(ver código contextualizado <a href=\"/w/index.php?title=Lista_de_exemplos_de_c%C3%B3digo_Python&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Lista de exemplos de código Python (página não existe)\">em anexo</a>)</i>.\n</p> <p>Python não possui overloading; não é possível criar duas funções com o mesmo nome, pois elas são consideradas atributos da classe. Caso o nome da função se repita em outra assinatura, o interpretador considera esta última como override e sobrescreve a função anterior. Algumas operações entre diferentes tipos são realizadas através de coerção (ex.: 3.2 + 3).\n</p> <p>É possível encapsular abstrações em módulos e pacotes. Quando um arquivo é criado com a extensão .py, ele automaticamente define um módulo. Um diretório com vários módulos é chamado de pacote e deve conter um modulo chamado __init__, para defini-lo como principal. Estas diferenciações ocorrem apenas no sistema de arquivos. Os objetos criados são sempre módulos. Caso o código não defina qual dos módulos será importado, o padrão é o __init__.\n</p> <p>Uma das construções funcionais de Python é <a href=\"/wiki/List_comprehension\" class=\"mw-redirect\" title=\"List comprehension\">compreensão de listas</a>, uma forma de construir listas. Por exemplo, pode-se usar a técnica para calcular as cinco primeiras potências de dois. O algoritmo <i><a href=\"/wiki/Quicksort\" title=\"Quicksort\">quicksort</a></i> também pode ser expressado usando a mesma técnica <i>(ver códigos contextualizados para ambos os casos <a href=\"/w/index.php?title=Lista_de_exemplos_de_c%C3%B3digo_Python&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Lista de exemplos de código Python (página não existe)\">em anexo</a>)</i>.\n</p> <p>Em Python, funções são objetos de primeira classe que podem ser criados e armazenados dinamicamente. O suporte a funções anônimas está na construção <code>lambda</code> (<a href=\"/wiki/C%C3%A1lculo_Lambda\" class=\"mw-redirect\" title=\"Cálculo Lambda\">cálculo Lambda</a>). Não há disponibilidade de funções anônimas de fato, pois os lambdas contêm somente expressões e não blocos de código.\n</p> <p>Python também suporta <a href=\"/wiki/Clausura_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)\" title=\"Clausura (ciência da computação)\">clausuras léxicas</a> desde a versão 2.2 <i>(ver códigos contextualizados para ambos os casos <a href=\"/w/index.php?title=Lista_de_exemplos_de_c%C3%B3digo_Python&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Lista de exemplos de código Python (página não existe)\">em anexo</a>)</i>. Já <a href=\"/wiki/Generator_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)\" class=\"mw-redirect\" title=\"Generator (ciência da computação)\">geradores</a> foram introduzidos na versão 2.2 e finalizados na versão 2.3, e representam o mecanismo de Python para a <a href=\"/wiki/Avalia%C3%A7%C3%A3o_pregui%C3%A7osa\" title=\"Avaliação preguiçosa\">avaliação preguiçosa</a> de funções <i>(ver códigos contextualizados para ambos os casos <a href=\"/w/index.php?title=Lista_de_exemplos_de_c%C3%B3digo_Python&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Lista de exemplos de código Python (página não existe)\">em anexo</a>)</i>.\n</p> <p>Python suporta e faz uso constante de <a href=\"/wiki/Tratamento_de_exce%C3%A7%C3%B5es\" class=\"mw-redirect\" title=\"Tratamento de exceções\">tratamento de exceções</a> como uma forma de testar condições de erro e outros eventos inesperados no programa. É inclusive possível capturar uma exceção causada por um erro de sintaxe. O estilo da linguagem apóia o uso de exceções sempre que uma condição de erro pode aparecer. Por exemplo, ao invés de testar a disponibilidade de acesso a um recurso, a convenção é simplesmente tentar usar o recurso e capturar a exceção caso o acesso seja rejeitado (recurso inexistente, permissão de acesso insuficiente, recurso já em uso, ...).\n</p> <p>Exceções são usadas frequentemente como uma estrutura de seleção, substituindo blocos <code>if-else</code>, especialmente em situações que envolvem <i><a href=\"/wiki/Thread_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)\" class=\"mw-redirect\" title=\"Thread (ciência da computação)\">threads</a></i>. Uma convenção de codificação é o EAFP, do inglês, \"é mais fácil pedir perdão que permissão\". Isso significa que em termos de desempenho é preferível capturar exceções do que testar atributos antes de os usar. Segue abaixo exemplos de código que testam atributos (\"pedem permissão\") e que capturam exceções (\"pedem perdão\"):\n</p> <p>Ambos os códigos produzem o mesmo efeito, mas há diferenças de desempenho. Quando <code>spam</code> possui o atributo <code>eggs</code>, o código que captura exceções é mais rápido. Caso contrário, a captura da exceção representa uma perda considerável de desempenho, e o código que testa o atributo é mais rápido. Na maioria dos casos o paradigma da captura de exceções é mais rápido, e também pode evitar problemas de <a href=\"/wiki/Concorr%C3%AAncia_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)\" title=\"Concorrência (ciência da computação)\">concorrência</a>.<sup id=\"cite_ref-37\" class=\"reference\"><a href=\"#cite_note-37\"><span>[</span>34<span>]</span></a></sup> Por exemplo, num ambiente multitarefa, o espaço de tempo entre o teste do atributo e seu uso de fato pode invalidar o atributo, problema que não acontece no caso da captura de exceções.\n</p> <p>Python possui uma grande <a href=\"/wiki/Biblioteca_de_rotinas\" class=\"mw-redirect\" title=\"Biblioteca de rotinas\">biblioteca</a> padrão, geralmente citada como um dos maiores trunfos da linguagem,<sup id=\"cite_ref-38\" class=\"reference\"><a href=\"#cite_note-38\"><span>[</span>35<span>]</span></a></sup> fornecendo ferramentas para diversas tarefas. Por conta da grande variedade de ferramentas fornecida pela biblioteca padrão, combinada com a habilidade de usar linguagens de nível mais baixo como C e C++, Python pode ser poderosa para conectar componentes diversos de software.\n</p> <p>A biblioteca padrão conta com facilidades para escrever aplicações para a <a href=\"/wiki/Internet\" title=\"Internet\">Internet</a>, contando com diversos formatos e <a href=\"/wiki/Protocolo_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)\" title=\"Protocolo (ciência da computação)\">protocolos</a> como <a href=\"/wiki/MIME\" title=\"MIME\">MIME</a> e <a href=\"/wiki/Hypertext_Transfer_Protocol\" title=\"Hypertext Transfer Protocol\">HTTP</a>. Também há módulos para criar <a href=\"/wiki/Interface_gr%C3%A1fica_do_utilizador\" title=\"Interface gráfica do utilizador\">interfaces gráficas</a>, conectar em <a href=\"/wiki/Banco_de_dados_relacional\" title=\"Banco de dados relacional\">bancos de dados relacionais</a> e manipular <a href=\"/wiki/Express%C3%A3o_regular\" title=\"Expressão regular\">expressões regulares</a>.\n</p> <p>Algumas partes da biblioteca são cobertas por especificações (por exemplo, a implementação <a href=\"/wiki/Web_Server_Gateway_Interface\" title=\"Web Server Gateway Interface\">WSGI</a> da <code>wsgiref</code> segue o PEP 333<sup id=\"cite_ref-39\" class=\"reference\"><a href=\"#cite_note-39\"><span>[</span>36<span>]</span></a></sup>), mas a maioria dos módulos não segue.\n</p> <p>Um outro ponto forte da linguagem é sua capacidade de interoperar com várias outras linguagens, principalmente código nativo. A documentação da linguagem inclui exemplos de como usar a Python C-API para escrever funções em C que podem ser chamadas diretamente de código Python - mas atualmente esse sequer é o modo mais indicado de interoperação, havendo alternativas tais como <a href=\"https://en.wikipedia.org/wiki/Cython\" class=\"extiw\" title=\"en:Cython\">Cython</a>, <a href=\"https://en.wikipedia.org/wiki/SWIG\" class=\"extiw\" title=\"en:SWIG\">Swig</a> ou <a rel=\"nofollow\" class=\"external text\" href=\"https://cffi.readthedocs.org/en/latest/\">cffi</a>. A <a href=\"/wiki/Boost_(bibliotecas_de_C%2B%2B)\" title=\"Boost (bibliotecas de C++)\">biblioteca Boost</a> do <a href=\"/wiki/C%2B%2B\" title=\"C++\">C++</a> inclui uma biblioteca para permitir a interoperabilidade entre as duas linguagens, e pacotes científicos fazem uso de bibliotecas de alta performance numérica escritos em <a href=\"/wiki/Fortran\" title=\"Fortran\">Fortran</a> e mantidos há décadas.\n</p> <p>Python fornece duas alternativas para documentar o código. A primeira é o uso de comentários para indicar o que certo código faz. Comentários começam com <code>#</code> e são terminados pela quebra da linha. Não há suporte para comentários que se estendem por mais de uma linha; cada linha consecutiva de comentário deve indicar <code>#</code>. A segunda alternativa é o uso de cadeias de caractere, literais de texto inseridos no código sem atribuição. Cadeias de caracteres em Python são delimitadas por <code>\"</code> ou <code>'</code> para única linha e por <code>\"\"\"</code> ou <code>'''</code> para múltiplas linhas. Entretanto, é convenção usar o métodos de múltiplas linhas em ambos os casos.\n</p> <p>Diferente de comentários, a cadeias de caracteres usadas como documentação são objetos Python e fazem parte do código interpretado. Isso significa que um programa pode acessar sua própria documentação e manipular a informação. Há ferramentas que extraem automaticamente essa documentação para a geração da documentação de <a href=\"/wiki/API\" class=\"mw-redirect\" title=\"API\">API</a> a partir do código. Documentação através de cadeias de caracteres também pode ser acessada a partir do interpretador através da função <code>help()</code>.\n</p> <p><a href=\"/wiki/Ponto_flutuante\" class=\"mw-redirect\" title=\"Ponto flutuante\">Ponto flutuante</a> em Python na maioria das plataformas é IEEE 754, que pode retornar valores \"nan\" e \"inf\", ou <a href=\"/wiki/Tratamento_de_exce%C3%A7%C3%A3o\" title=\"Tratamento de exceção\">lançar uma exceção</a>.\n</p> <p>Exemplo de um <a href=\"/wiki/An%C3%A1lise_sint%C3%A1tica_(computa%C3%A7%C3%A3o)\" title=\"Análise sintática (computação)\">analisador sintático</a> usando uma <a href=\"/wiki/Gram%C3%A1tica_de_an%C3%A1lise_sint%C3%A1tica_de_express%C3%A3o\" title=\"Gramática de análise sintática de expressão\">gramática de análise sintática de expressão</a> (PEG):\n</p> <p>Exemplo de um <i><a href=\"/wiki/Web_service\" title=\"Web service\">web service</a></i> <a href=\"/wiki/REST\" title=\"REST\">RESTful</a> (<a href=\"/wiki/Hypertext_Transfer_Protocol\" title=\"Hypertext Transfer Protocol\">HTTP</a>) usando <a href=\"https://en.wikipedia.org/wiki/async/await\" class=\"extiw\" title=\"en:async/await\">funções assíncronas</a> e <a href=\"/wiki/Serializa%C3%A7%C3%A3o\" title=\"Serialização\">serialização</a> para <a href=\"/wiki/JSON\" title=\"JSON\">JSON</a>; responde com um número de <a href=\"/wiki/Cadastro_de_Pessoas_F%C3%ADsicas\" title=\"Cadastro de Pessoas Físicas\">CPF</a> formatado, se for válido, ao acessar <code><a rel=\"nofollow\" class=\"external free\" href=\"http://localhost:3000/consultar-cpf/123\">http://localhost:3000/consultar-cpf/123</a></code>:\n</p> <p>Pode ser executado com o seguinte comando:\n</p> <p>Exemplo de uma implementação do <a href=\"/wiki/Echo_(comando)\" title=\"Echo (comando)\">echo</a> do <a href=\"/wiki/Unix\" title=\"Unix\">Unix</a>:\n</p> <p>A linguagem e seu interpretador estão disponíveis para uso nas mais diversas <a href=\"/wiki/Plataforma_(inform%C3%A1tica)\" class=\"mw-redirect\" title=\"Plataforma (informática)\">plataformas</a>, que inclui: <a href=\"/wiki/Unix\" title=\"Unix\">Unix</a> (<a href=\"/wiki/Linux\" title=\"Linux\">Linux</a>, <a href=\"/wiki/FreeBSD\" title=\"FreeBSD\">FreeBSD</a>, <a href=\"/wiki/Solaris_(sistema_operacional)\" title=\"Solaris (sistema operacional)\">Solaris</a>, <a href=\"/wiki/MacOS\" title=\"MacOS\">macOS</a>, etc.); <a href=\"/wiki/Microsoft_Windows\" title=\"Microsoft Windows\">Windows</a> com <a href=\"/wiki/.NET\" title=\".NET\">.NET</a> (<a href=\"/wiki/IronPython\" title=\"IronPython\">IronPython</a>) e <a href=\"/wiki/Java_(plataforma_de_software)\" title=\"Java (plataforma de software)\">plataforma Java</a> (<a href=\"/wiki/Jython\" title=\"Jython\">Jython</a>); consoles de jogos eletrônicos; alguns celulares, como a série 60, N8xx (PyMaemo) da <a href=\"/wiki/Nokia\" title=\"Nokia\">Nokia</a> e <a href=\"/wiki/PDA\" class=\"mw-redirect\" title=\"PDA\">palmtops</a>.\n</p> <p>A implementação original e mais conhecida do Python é o <i><a href=\"/wiki/CPython\" title=\"CPython\">CPython</a></i>, escrita em <a href=\"/wiki/C_(linguagem_de_programa%C3%A7%C3%A3o)\" title=\"C (linguagem de programação)\">C</a> e compatível com o padrão <a href=\"/wiki/C89\" class=\"mw-redirect\" title=\"C89\">C89</a>,<sup id=\"cite_ref-40\" class=\"reference\"><a href=\"#cite_note-40\"><span>[</span>37<span>]</span></a></sup> sendo distribuída com uma grande biblioteca padrão escrita em um misto de Python e C. Esta implementação é suportada em diversas plataformas, incluindo Windows e sistemas <a href=\"/wiki/Sistema_operacional_tipo_Unix\" title=\"Sistema operacional tipo Unix\">Unix-like</a> modernos. <a href=\"/w/index.php?title=Stackless_Python&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Stackless Python (página não existe)\">Stackless Python</a> é uma variação do CPython que implementa <a href=\"/w/index.php?title=Microthread&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Microthread (página não existe)\">microthreads</a> (permitindo <a href=\"/wiki/Multitarefa\" title=\"Multitarefa\">multitarefa</a> sem o uso de <a href=\"/wiki/Thread_(computa%C3%A7%C3%A3o)\" title=\"Thread (computação)\">threads</a>), sendo suportada em quase todas as plataformas que a implementação original.\n</p> <p>Em 2005 a <a href=\"/wiki/Nokia\" title=\"Nokia\">Nokia</a> lançou um interpretador Python para os <a href=\"/wiki/Telefone_celular\" title=\"Telefone celular\">telefones celulares</a> <a href=\"/w/index.php?title=S60&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"S60 (página não existe)\">S60</a>, chamado <a href=\"/w/index.php?title=PyS60&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"PyS60 (página não existe)\">PyS60</a>. Essa versão inclui vários módulos das implementações tradicionais, mas também alguns módulos adicionais para a integração com o sistema operacional <a href=\"/wiki/Symbian\" title=\"Symbian\">Symbian</a>. Uma implementação para <a href=\"/wiki/Palm\" class=\"mw-redirect\" title=\"Palm\">Palm</a> pode ser encontrada no <a href=\"/w/index.php?title=Pippy&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Pippy (página não existe)\">Pippy</a>. Já o <a href=\"/wiki/PyPy\" title=\"PyPy\">PyPy</a>, é a linguagem Python totalmente escrita em Python.\n</p> <p>Diversas implementações, como CPython, pode funcionar como um <a href=\"/wiki/Interpretador_de_comandos\" title=\"Interpretador de comandos\">interpretador de comandos</a> em que o usuário executa as instruções sequencialmente, recebendo o resultado automaticamente. A execução compilada do código oferece um ganho substancial em velocidade, com o custo da perda da <a href=\"/wiki/Interatividade\" title=\"Interatividade\">interatividade</a>.\n</p> <p>Alguns grandes projetos utilizam Python, como por exemplo: o <a href=\"/wiki/Servidor_de_aplica%C3%A7%C3%A3o\" title=\"Servidor de aplicação\">servidor de aplicação</a> <a href=\"/wiki/Zope\" title=\"Zope\">Zope</a>; o compartilhador de arquivos <a href=\"/wiki/Mnet\" title=\"Mnet\">Mnet</a>; o sítio <a href=\"/wiki/YouTube\" title=\"YouTube\">YouTube</a>, e; o cliente original <a href=\"/wiki/BitTorrent\" title=\"BitTorrent\">BitTorrent</a>. Grandes organizações que usam a linguagem incluem <a href=\"/wiki/Google\" title=\"Google\">Google</a><sup id=\"cite_ref-41\" class=\"reference\"><a href=\"#cite_note-41\"><span>[</span>38<span>]</span></a></sup> (parte dos <i><a href=\"/wiki/Rastreador_web\" title=\"Rastreador web\">crawlers</a></i>); <a href=\"/wiki/Yahoo!\" title=\"Yahoo!\">Yahoo!</a> (para o sítio de grupos de usuários); <a href=\"/wiki/NASA\" title=\"NASA\">NASA</a>;<sup id=\"cite_ref-42\" class=\"reference\"><a href=\"#cite_note-42\"><span>[</span>39<span>]</span></a></sup> a <a href=\"/wiki/Air_Canada\" title=\"Air Canada\">Air Canada</a> (no sistema de gerenciamento de reservas).<sup id=\"cite_ref-43\" class=\"reference\"><a href=\"#cite_note-43\"><span>[</span>40<span>]</span></a></sup> A linguagem também tem bastante uso na indústria da <a href=\"/wiki/Seguran%C3%A7a_da_informa%C3%A7%C3%A3o\" title=\"Segurança da informação\">segurança da informação</a>.\n</p> <p>A linguagem tem sido embarcada como <a href=\"/wiki/Linguagem_de_script\" title=\"Linguagem de script\">linguagem de script</a> em diversos softwares, como em programas de <a href=\"/wiki/3D_(computa%C3%A7%C3%A3o_gr%C3%A1fica)\" title=\"3D (computação gráfica)\">edição tridimensional</a> como <a href=\"/wiki/Autodesk_Maya\" title=\"Autodesk Maya\">Maya</a>,<sup id=\"cite_ref-44\" class=\"reference\"><a href=\"#cite_note-44\"><span>[</span>41<span>]</span></a></sup> <a href=\"/wiki/Autodesk_Softimage\" title=\"Autodesk Softimage\">Autodesk Softimage</a>, <a href=\"/wiki/TrueSpace\" title=\"TrueSpace\">TrueSpace</a> e <a href=\"/wiki/Blender\" title=\"Blender\">Blender</a>.<sup id=\"cite_ref-45\" class=\"reference\"><a href=\"#cite_note-45\"><span>[</span>42<span>]</span></a></sup> Programas de edição de imagem também a usam para scripts, como o <a href=\"/wiki/GIMP\" title=\"GIMP\">GIMP</a>.<sup id=\"cite_ref-46\" class=\"reference\"><a href=\"#cite_note-46\"><span>[</span>43<span>]</span></a></sup> Para diversos sistema operacionais a linguagem já é um componente padrão, estando disponível em diversas distribuições <a href=\"/wiki/Linux\" title=\"Linux\">Linux</a>. O <a href=\"/wiki/Red_Hat_Linux\" title=\"Red Hat Linux\">Red Hat Linux</a> usa Python para instalação, configuração e gerenciamento de pacotes.\n</p> <p>Outros exemplos incluem o <a href=\"/wiki/Plone\" title=\"Plone\">Plone</a>, <a href=\"/wiki/Sistema_de_gerenciamento_de_conte%C3%BAdo\" title=\"Sistema de gerenciamento de conteúdo\">sistema de gerenciamento de conteúdo</a> desenvolvido em Python e Zope e, a <a href=\"/wiki/Industrial_Light_%26_Magic\" title=\"Industrial Light &amp; Magic\">Industrial Light &amp; Magic</a>,<sup id=\"cite_ref-47\" class=\"reference\"><a href=\"#cite_note-47\"><span>[</span>44<span>]</span></a></sup> que produz filmes da série <i><a href=\"/wiki/Star_Wars\" title=\"Star Wars\">Star Wars</a></i> usando extensivamente Python para a <a href=\"/wiki/Computa%C3%A7%C3%A3o_gr%C3%A1fica\" title=\"Computação gráfica\">computação gráfica</a> nos processos de produção dos filmes.\n</p>"
    }
]