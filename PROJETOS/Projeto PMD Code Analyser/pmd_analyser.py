import subprocess
import os
import shutil
from fpdf import FPDF

# -----------------------------------
# Configura√ß√µes principais
# -----------------------------------

PMD_CMD = "pmd-bin-7.14.0/bin/pmd"  # Caminho relativo para o execut√°vel PMD
REPO_URL = "https://github.com/arieslab/jnose.git"  # Reposit√≥rio Java a ser analisado
CLONE_DIR = os.path.basename(REPO_URL).removesuffix(".git") # Pasta onde o reposit√≥rio ser√° clonado localmente
RULESET = "category/java/bestpractices.xml"  # Ruleset padr√£o para an√°lise Java do PMD 7
REPORT_FORMAT = "text"  # Formato do relat√≥rio: pode ser 'text', 'xml', 'json', etc.

# -----------------------------------
# Fun√ß√£o para clonar o reposit√≥rio
# -----------------------------------
def clone_repo():
    # Se j√° existir a pasta do reposit√≥rio, remove para evitar conflitos
    if os.path.exists(CLONE_DIR):
        print(f"üóëÔ∏è Removendo pasta existente '{CLONE_DIR}' para re-clonar...")
        shutil.rmtree(CLONE_DIR)
    
    # Clona o reposit√≥rio do GitHub localmente
    print(f"üì• Clonando reposit√≥rio {REPO_URL}...")
    subprocess.run(["git", "clone", REPO_URL], check=True)

# -----------------------------------
# Fun√ß√£o para executar o PMD via CLI
# -----------------------------------
def run_pmd():
    # PMD espera o caminho para os arquivos-fonte via -d ou --dir
    source_dir = os.path.join(CLONE_DIR, "src")
    
    # Verifica se a pasta de c√≥digo-fonte existe
    if not os.path.exists(source_dir):
        raise FileNotFoundError(f"‚ö†Ô∏è Pasta do c√≥digo-fonte n√£o encontrada: {source_dir}")

    print("üîç Executando an√°lise PMD...")

    # Monta o comando conforme documenta√ß√£o:
    # pmd check -d <diret√≥rio> -R <ruleset> -f <formato do relat√≥rio>
    command = [
        PMD_CMD,
        "check",             # Subcomando para rodar a an√°lise
        "-d", source_dir,    # Diret√≥rio com c√≥digo fonte Java
        "-R", RULESET,       # Ruleset que define quais regras rodar
        "-f", REPORT_FORMAT  # Formato do relat√≥rio de sa√≠da
    ]

    # Executa o comando, capturando stdout e stderr como texto
    process = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    # Exibe o relat√≥rio gerado pelo PMD
    if process.stdout:
        print("== üìÑ Relat√≥rio PMD ==\n")
        print(process.stdout)
        # Exporta o relat√≥rio para PDF
        export_report_to_pdf(process.stdout, output_pdf_path="pmd_report.pdf")

    # Exibe poss√≠veis erros do PMD
    if process.stderr:
        print("== üö® Erros PMD (stderr) ==\n")
        print(process.stderr)

# -----------------------------------
# Fun√ß√£o para limpar o reposit√≥rio clonado
# -----------------------------------
def cleanup_repo():
    if os.path.exists(CLONE_DIR):
        print(f"üßπ Limpando pasta '{CLONE_DIR}' ap√≥s an√°lise...")
        shutil.rmtree(CLONE_DIR)

# -----------------------------------
# Fun√ß√£o para exportar o relat√≥rio PMD para PDF
# -----------------------------------
def export_report_to_pdf(report_text, output_pdf_path="pmd_report.pdf"):
    """
    Gera um PDF simples contendo o texto do relat√≥rio PMD.
    Usa a biblioteca fpdf para criar o arquivo PDF.
    """
    print("üìÑ Exportando relat√≥rio para PDF...\n")
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=8)

    # Quebra o texto em linhas para n√£o ultrapassar a largura da p√°gina
    for line in report_text.splitlines():
        pdf.multi_cell(0, 10, txt=line)

    pdf.output(output_pdf_path)
    print(f"üìë Relat√≥rio exportado para PDF: {output_pdf_path}\n")

# -----------------------------------
# Fluxo principal do script
# -----------------------------------
if __name__ == "__main__":
    print("*" * 150)
    print("üöÄ Iniciando an√°lise est√°tica com PMD...")
    print("*" * 150)
            
    # No Linux/macOS: garante que o execut√°vel do PMD tem permiss√£o de execu√ß√£o
    if os.name != "nt":
        subprocess.run(["chmod", "+x", PMD_CMD])

    # Passo 1: clona o reposit√≥rio Java para analisar
    print("*" * 150)
    clone_repo()
    print("*" * 150)
            
    # Passo 2: executa o PMD para rodar as an√°lises est√°ticas
    print("*" * 150)
    run_pmd()
    print("*" * 150)
    
    # Passo 3: remove o reposit√≥rio clonado para manter a pasta limpa
    print("*" * 150)
    cleanup_repo()
    print("*" * 150)
    
    print("*" * 150)
    print("‚úÖ An√°lise finalizada com sucesso!")
    print("*" * 150)